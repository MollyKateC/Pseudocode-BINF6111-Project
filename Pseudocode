#!/usr/bin/perl
use warnings;
use strict;

############################
## Pseudocode for Project ##
############################

#Variables:
my $reference_seq;
my $bisulfite_seq;

#Ask user for reference sequence(list filetype?)
print "Enter the Filename for the reference sequence: ";
$reference_seq = <STDIN>;
chomp $reference_seq;
unless( -e $reference_seq) {
	print "File \"$reference_seq\" does not seem to exist\n";
	exit;
}

#Ask user for bisulfite treated sequence
print "Enter the Filename for the bisulfite treated sequence: ";
$bisulfite_seq = <STDIN>;
chomp $bisulfite_seq;
unless( -e $bisulfite_seq) {
	print "File \"$bisulfite_seq\" does not seem to exist\n";
	exit;
}


#store files in variable
#prepare files
	#remove whitespace
	#remove newlines
	#join into one string
	#explode string into an array
open (REFERENCE,$reference_seq) || die "The reference  file cannot be opened";
my $seqA = <REFERENCE>;
close (REFERENCE);

open (BISUL,$bisulfite_seq) || die "This Bisulfite file cannot be opened";
my $seqB = <BISUL>;
close (BISUL);

my $seq1=$seqA;
my $seq2=$seqB;
$seq1 =~ tr/acgt/ACGT/;
$seq2 =~ tr/acgt/ACGT/;

print $seq1;
print $seq2;	
#Search for CG regions
	#foreach /C/ {
	#	if( /GC/ | /CG/){}
	# remove duplicated regions (i.e. GCG)
	# 	else {}
	# }
	
#Store and report position of CG regions (file output)

##Compare arrays using Perl 5.1's Smartmatch Operator

#Find CG regions on reference genome array
	#store Cs in an array that has empty elements for locations where there is not a C
		#for example:
			#reference-   AAATCCAGCTTTTACGAAA
			#array of Cs- ********C*****C****, where * indicates whitespace
	#Match location of CG regions from reference genome to the bisulfite treated genome
		#clear out non-matching regions (?)
		#for example:
			#reference genome		AAATCCAGCTTTTACGAAA
			#reference C regions	********C*****C****
			#bisulfite genome		AAATTTAGTTTTTACGAAA
			#matched bisulfite		********T*****C****
			
	
	#Report Results of comparison in text file format? Spreadsheet?
	
			
exit;






